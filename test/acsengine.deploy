#!/usr/bin/env groovy

node {
  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'AZURE_CLI_SPN_ACS_TEST',
                  passwordVariable: 'SPN_PASSWORD', usernameVariable: 'SPN_USER']]) {
    timestamps {
      wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {
        env.GOPATH="${WORKSPACE}"
        def clone_dir = "${env.GOPATH}/src/github.com/Azure/acs-engine"
        env.HOME=clone_dir
        env.ORCHESTRATOR = "${ORCHESTRATOR}"
        String locations_str = "${LOCATIONS}"
        
        if(locations_str.equals("all")) {
          locations_str = "\
australiaeast australiasoutheast \
brazilsouth \
canadacentral canadaeast \
centralindia southindia westindia\
centralus eastus2 eastus northcentralus southcentralus westcentralus westus2 westus \
eastasia southeastasia \
japaneast japanwest \
northeurope westeurope \
uksouth ukwest"
        }
        def locations = locations_str.tokenize('[ \t\n]+')



        dir(clone_dir) {
          def img = null

          stage('Prepare') {
            deleteDir()
            //docker.image("ubuntu").inside() {
            //  sh("rm -rf ${WORKSPACE}")
            //}
            checkout scm
            img = docker.build('ds-acs-engine', '--pull .')
          }

          img.inside("-u root:root") {
            sh("az login --service-principal -u ${SPN_USER} -p ${SPN_PASSWORD} --tenant ${TENANT_ID}")
            sh("az account set --subscription ${SUBSCRIPTION_ID}")

            // Build and Test
            stage('Build') {
              sh('make ci')
            }

            stage('Create templates') {
              sh("echo \"export INSTANCE_NAME=acs-test\$(printf \"%x\" \$(date '+%s'))\" > test/user.env")
              sh("echo \"export CLUSTER_DEFINITION=examples/${ORCHESTRATOR}.json\" >> test/user.env")
              sh("echo \"export CLUSTER_SERVICE_PRINCIPAL_CLIENT_ID=${SERVICE_PRINCIPAL_CLIENT_ID}\" >> test/user.env")
              sh("echo \"export CLUSTER_SERVICE_PRINCIPAL_CLIENT_SECRET=${SERVICE_PRINCIPAL_CLIENT_SECRET}\" >> test/user.env")
              sh('./test/step.sh generate_template')
            }

            for (i = 0; i <locations.size(); i++) {
              env.LOCATION = locations[i]
              env.RESOURCE_GROUP = "test-acs-${ORCHESTRATOR}-${env.LOCATION}"
              env.DEPLOYMENT_NAME = "${env.RESOURCE_GROUP}"
              def ok = true
              // Deploy
              try {
                stage("${env.LOCATION} deploy") {
                  sh('./test/step.sh deploy_template')
                }
              }
              catch(exc) {
                println "Exception ${exc}"
                ok = false
              }
              // Verify deployment
              try {
                stage("${env.LOCATION} verify") {
                  if(ok) {
                    sh('./test/step.sh verify')
                  }
                  else {
                    sh("Skipped verification for ${env.RESOURCE_GROUP}")
                  }
                }
              }
              catch(exc) {
                println "Exception ${exc}"
              }
              // Clean up
              try {
                sh('./test/step.sh cleanup')
              }
              catch(exc) {
                println "Exception ${exc}"
              }
            }
          }
        }
      }
    }
  }
}
